(define (cons x y) (lambda (p) (p x y)))
(define (car x) (x (lambda (x y) x)))
(define (cdr x) (x (lambda (x y) y)))
(define (list-ref iterms n)
 (if (= n 0) (car iterms)
  (list-ref (cdr iterms) (- n 1))))
(define (map proc iterms)
 (if (null? iterms) '()
  (cons (proc (car iterms))
   (map proc (cdr iterms)))))
(define (scale-list iterms factor)
 (map (lambda (x) (* x factor)) iterms))
(define (add-lists list1 list2)
 (cond((null? list1) list2)
  ((null? list2) list1)
  (else (cons (+ (car list1) (car list2))
		 (add-lists (cdr list1) (cdr list2))))))
(define ones (cons 1 ones))
(define integers (cons 1 (add-lists ones integers)))
(define (integral integrand initial-value dt)
 (define int 
  (cons initial-value 
   (add-lists (scale-list integrand dt) int)))
 int)
(define (solve f y0 dt)
 (define y (integral dy y0 dt))
 (define dy (map f y)) y)
