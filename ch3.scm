(load "ch1.scm")
(define withdraw
  (let ((balance 100))
    (lambda (amount)
      (cond ((>= balance amount)
	     (begin (set! balance (- balance amount))
		    balance))
	    (else (error "Insufficient funds!"))))))

(define (make-withdraw balance)
  (lambda (amount)
    (cond ((>= balance amount)
	   (begin (set! balance (- balance amount))
		  balance))
	  (else (error "Insufficient funds!")))))

(define (make-account balance)
  (define (withdraw amount)
    (cond ((>= balance amount)
	   (begin (set! balance (- balance amount))
		  balance))
	  (else (error "Insufficient funds!"))))
  (define (deposite amount)
    (begin (set! balance (+ balance amount))
	   balance))
  (lambda (op)
    (cond ((eq? op 'withdraw) withdraw)
	  ((eq? op 'deposite) deposite)
	  (else (error "Unknown operation! -> " (list op))))))

; exercise 3.1
(define (make-accumulator sum)
  (lambda (num)
    (begin (set! sum (+ sum num)) sum)))

; exercise 3.2
(define (make-monitored f)
  (let ((monitor-counter 0))
    (lambda (input)
      (cond ((eq? input 'how-many-calls?) monitor-counter)
	    ((eq? input 'reset-counter)
	     (begin (set! monitor-counter 0) 0))
	    (else (begin (set! monitor-counter (+ monitor-counter 1)) (f input)))))))

; exercise 3.3
(define (make-account balance password)
  (define secret-passwd password)
  (define passwd-counter 0)
  (define passwd-counter-limit 5)
  (define (call-the-cops)
    (error "call the cops!"))
  (begin (set! secret-passwd password)
	 (lambda (op)
	   (cond ((eq? op 'withdraw)
		  (lambda (passwd amount)
		    (if (eq? passwd secret-passwd)
			(begin (set! passwd-counter 0)
			       (cond ((>= balance amount)
				      (begin (set! balance (- balance amount))
					     balance))
				     (else (error "Insufficient funds!"))))
			(begin (set! passwd-counter (+ passwd-counter 1))
			       (if (= passwd-counter passwd-counter-limit)
				   (call-the-cops)
				   (error "Incorrect Password!"))))))
		 ((eq? op 'deposite)
		   (lambda (passwd amount)
		    (if (eq? passwd secret-passwd)
			(begin (set! passwd-counter 0)
			       (set! balance (+ balance amount)) balance)
			(begin (set! passwd-counter (+ passwd-counter 1))
			       (if (= passwd-counter passwd-counter-limit)
				   (call-the-cops)
				   (error "Incorrect Password!"))))))
		 (else (error "Unknown operation -> " (list op)))))))

; benefits of introducing assignment
; exercise 3.7
(define (make-joint acc old-pwd new-pwd)
  (lambda (op)
    (cond ((eq? op 'withdraw)
	   (lambda (passwd amount)
	     ((acc 'withdraw)
	      (if (eq? passwd new-pwd)
		  old-pwd 'invalidpasswd) amount)))
	  ((eq? op 'deposite)
	   (lambda (passwd amount)
	     ((acc 'deposite)
	      (if (eq? passwd new-pwd)
		  old-pwd 'invalidpasswd) amount)))
	  (else (error "Unknown operation -> " (list op))))))

; exercise 3.8
(define (make-f)
  (let ((switch 1))
    (lambda (v)
      (if (= switch 1)
	  (if (> v 0) v
	      (begin (set! switch 0) 0)) 0))))
	  
; exercise 3.14
(define (mystery x)
  (define (loop x y)
    (if (null? x) y
	(let ((left-stuff (cdr x)))
	  (set-cdr! x y)
	  (loop left-stuff x))))
  (loop x '()))

; exercise 3.16
(define (count-pairs x)
  (let ((s '()))
    (define (insert x)
      (if (null? s) (set! s (list x))
	  (set-cdr! s (cons x (cdr s)))))
    (define (in-set s x)
      (cond ((null? s) #f)
	    ((eq? x (car s)) #t)
	    (else (in-set (cdr s) x))))
    (define (count-pairs-helper x)
      (if (not (pair? x)) 0
	  (+ (count-pairs-helper (car x))
	     (count-pairs-helper (cdr x))
	     (if (in-set s x) 0
		 (begin (insert x) 1)))))
    (count-pairs-helper x)
    (length s)))
		
(define (last-pair x)
  (if (null? (cdr x))
      x (last-pair (cdr x))))
(define (make-cycle x)
  (set-cdr! (last-pair x) x))

; exercise 3.18
